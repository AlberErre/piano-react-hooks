{"version":3,"sources":["components/PianoKey.js","components/Title.js","components/Footer.js","data/soundList.js","App.js","serviceWorker.js","index.js"],"names":["Pianokey","props","sound","react_default","a","createElement","className","class","onClick","audio","play","Title","role","aria-label","Footer","href","target","soundList","a1","url","a1s","b1","c1","c1s","c2","d1","d1s","e1","f1","f1s","g1","g1s","App","_useState","useState","_useState2","Object","slicedToArray","pianoData","setPianoData","useEffect","sounds","keys","map","key","Audio","Fragment","components_Title","i","PianoKey","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAOeA,EALE,SAAAC,GAAS,IAChBC,EAAUD,EAAVC,MACR,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMK,MAAOC,QAAS,kBAAMN,EAAMO,MAAMC,WCYlDC,MAdf,WACE,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAAf,WACW,IACTH,EAAAC,EAAAC,cAAA,QAAMO,KAAK,MAAMC,aAAW,iBAA5B,gBAGAV,EAAAC,EAAAC,cAAA,QAAMO,KAAK,MAAMC,aAAW,cAA5B,kBCISC,MAXf,WACE,OACEX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,UACU,IACRH,EAAAC,EAAAC,cAAA,KAAGU,KAAK,yBAAyBC,OAAO,SAAxC,gBCNOC,EAAY,CACvBC,GAAI,CACFC,IACE,6FACFZ,MAAO,gBAETa,IAAK,CACHD,IACE,sFACFZ,MAAO,YAETc,GAAI,CACFF,IACE,4FACFZ,MAAO,OAETe,GAAI,CACFH,IACE,wFACFZ,MAAO,YAETgB,IAAK,CACHJ,IAAK,uEACLZ,MAAO,OAETiB,GAAI,CACFL,IACE,sFACFZ,MAAO,OAETkB,GAAI,CACFN,IACE,+FACFZ,MAAO,YAETmB,IAAK,CACHP,IACE,6FACFZ,MAAO,OAEToB,GAAI,CACFR,IACE,0EACFZ,MAAO,YAETqB,GAAI,CACFT,IACE,4EACFZ,MAAO,OAETsB,IAAK,CACHV,IACE,wFACFZ,MAAO,YAETuB,GAAI,CACFX,IACE,wFACFZ,MAAO,OAETwB,IAAK,CACHZ,IAAK,gEACLZ,MAAO,4BCxBIyB,MA9Bf,WAAe,IAAAC,EACqBC,mBAAS,IAD9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACKI,EADLJ,EAAA,GAeb,OAZAK,oBAAU,WACR,IACMC,EADOL,OAAOM,KAAKzB,GACL0B,IAAI,SAAAC,GACtB,MAAO,CACLnC,MAAO,IAAIoC,MAAM5B,EAAU2B,GAAKzB,KAChCZ,MAAOU,EAAU2B,GAAKrC,SAG1BgC,EAAaE,IAEZ,IAGDtC,EAAAC,EAAAC,cAACF,EAAAC,EAAM0C,SAAP,KACE3C,EAAAC,EAAAC,cAAC0C,EAAD,MACA5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZgC,EAAUK,IAAI,SAACzC,EAAO8C,GAAR,OACb7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAUL,IAAKI,EAAG9C,MAAOA,QAI/BC,EAAAC,EAAAC,cAAC6C,EAAD,QCrBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f79138dc.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Pianokey = props => {\n  const { sound } = props;\n  return <div className={sound.class} onClick={() => sound.audio.play()} />;\n};\n\nexport default Pianokey;\n","import React from \"react\";\n\nfunction Title() {\n  return (\n    <div className=\"title animated jackInTheBox\">\n      Piano.js{\" \"}\n      <span role=\"img\" aria-label=\"Space Invader\">\n        üëæ\n      </span>\n      <span role=\"img\" aria-label=\"Light Beam\">\n        ‚òÑÔ∏è\n      </span>\n    </div>\n  );\n}\n\nexport default Title;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <h5 className=\"footer\">\n      Made by{\" \"}\n      <a href=\"https://albererre.com/\" target=\"blank\">\n        Alber Erre\n      </a>\n    </h5>\n  );\n}\n\nexport default Footer;\n","export const soundList = {\n  a1: {\n    url:\n      \"http://codeskulptor-demos.commondatastorage.googleapis.com/GalaxyInvaders/player_shoot.wav\",\n    class: \"key firstKey\"\n  },\n  a1s: {\n    url:\n      \"http://codeskulptor-demos.commondatastorage.googleapis.com/GalaxyInvaders/bonus.wav\",\n    class: \"bkey key\"\n  },\n  b1: {\n    url:\n      \"http://codeskulptor-demos.commondatastorage.googleapis.com/GalaxyInvaders/alien_shoot.wav\",\n    class: \"key\"\n  },\n  c1: {\n    url:\n      \"http://commondatastorage.googleapis.com/codeskulptor-demos/pyman_assets/eatedible.ogg\",\n    class: \"bkey key\"\n  },\n  c1s: {\n    url: \"http://commondatastorage.googleapis.com/codeskulptor-assets/jump.ogg\",\n    class: \"key\"\n  },\n  c2: {\n    url:\n      \"http://codeskulptor-demos.commondatastorage.googleapis.com/GalaxyInvaders/pause.wav\",\n    class: \"key\"\n  },\n  d1: {\n    url:\n      \"http://codeskulptor-demos.commondatastorage.googleapis.com/GalaxyInvaders/explosion%2001.wav\",\n    class: \"bkey key\"\n  },\n  d1s: {\n    url:\n      \"http://codeskulptor-demos.commondatastorage.googleapis.com/GalaxyInvaders/explosion_02.wav\",\n    class: \"key\"\n  },\n  e1: {\n    url:\n      \"http://codeskulptor-demos.commondatastorage.googleapis.com/pang/pop.mp3\",\n    class: \"bkey key\"\n  },\n  f1: {\n    url:\n      \"http://codeskulptor-demos.commondatastorage.googleapis.com/pang/arrow.mp3\",\n    class: \"key\"\n  },\n  f1s: {\n    url:\n      \"http://commondatastorage.googleapis.com/codeskulptor-demos/pyman_assets/extralife.ogg\",\n    class: \"bkey key\"\n  },\n  g1: {\n    url:\n      \"http://commondatastorage.googleapis.com/codeskulptor-demos/pyman_assets/eatpellet.ogg\",\n    class: \"key\"\n  },\n  g1s: {\n    url: \"http://rpg.hamsterrepublic.com/wiki-images/d/d7/Oddbounce.ogg\",\n    class: \"key lastKey\"\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport PianoKey from \"./components/PianoKey\";\nimport Title from \"./components/Title\";\nimport Footer from \"./components/Footer\";\nimport { soundList } from \"./data/soundList\";\nimport \"./App.css\";\nimport \"animate.css\";\n\nfunction App() {\n  const [pianoData, setPianoData] = useState([]);\n\n  useEffect(() => {\n    const keys = Object.keys(soundList);\n    const sounds = keys.map(key => {\n      return {\n        audio: new Audio(soundList[key].url),\n        class: soundList[key].class\n      };\n    });\n    setPianoData(sounds);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Title />\n      <div className=\"piano animated slideInUp\">\n        <div className=\"keyContainer\">\n          {pianoData.map((sound, i) => (\n            <PianoKey key={i} sound={sound} />\n          ))}\n        </div>\n      </div>\n      <Footer />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}